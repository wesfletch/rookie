#!/usr/bin/env python3

from enum import Enum, unique
from typing import TypeVar


DELIM: str = " "
END: str = "\n"

uint32 = int
uint8 = int
string = str

M = TypeVar("M", bound="Message")

class Message:
    class MESSAGE_TYPE(Enum):
        COMMAND = 1
        STATUS = 2

    name: str = ""
    id: str = ""

    _fields: list = []

    def pack(self, msg_type: MESSAGE_TYPE) -> bytes:
        msg: str = f"{self.id}"
        if msg_type is Message.MESSAGE_TYPE.COMMAND:
            msg += ".C"
        elif msg_type is Message.MESSAGE_TYPE.STATUS:
            msg += ".S"
        else:
            raise Exception("Invalid message type.")

        for field in self._fields:
            val: str = str(getattr(self, field[0]))
            msg += f"{DELIM}{val}"
        msg += END

        return bytes(msg, encoding="utf-8")
    
    @classmethod
    def unpack(cls: type[M], data: bytes) -> M:
        decoded: str = data.decode(encoding="utf-8").rstrip()
        split: list[str] = decoded.split(DELIM)

        # Strip the ID out, if it's there.
        if cls.id in split[0]:
            split = split[1:]

        constructor_params: dict = {}
        for idx, field in enumerate(split):
            field_name: str = cls._fields[idx][0]
            field_type: type = cls._fields[idx][1]

            if issubclass(field_type, Enum):
                field = int(field)

            field_value = field_type(field)

            constructor_params[field_name] = field_value

        message: Message = cls(**constructor_params)
        return message


{% for msg in messages %}
class {{ msg.name }}(Message):
    """{{ msg.name }} message. Autogenerated on {{ date_time }}"""
    {% for enum in msg.enums %}
    @unique
    class {{ enum.name }}(Enum):
        {% for field in enum.enums %}{{ field.name }} = {{ field.value }}
        {% endfor -%}
    
        def __str__(self) -> str:
            return str(self.value)
    {% endfor %}


    name: str = "{{ msg.name }}"
    id: str = "${{ msg.id }}"

    _fields: list = [
        {% for field in msg.fields %}
        ("{{ field.name }}", {{ field.type }}),
        {% endfor %}
    ]

    def __init__(
        self,
        {% for field in msg.fields -%}
        {{ field.name }}: {{ field.type }}, 
        {% endfor %}
    ) -> None:

        {% for field in msg.fields %}self.{{field.name }} = {{field.name}}
        {% endfor %}


{% endfor %}

MSG_IDS: dict[str,Message] = {
    {% for msg in messages %}"${{ msg.id }}": {{ msg.name }},
    {% endfor -%}
}